---
import Layout from "../../layouts/Layout.astro";
import BannerTitle from "../../components/BannerTitle.astro";
import PostPreview from "../../components/PostPreview.astro";
import client from "../../lib/apolloClient";
import {
  GET_CATEGORIES,
  GET_TEMPLATE,
  GET_CATEGORY_BY_SLUG
} from "../../lib/queries";
import { getPostsByCategory } from "../../lib/fetchAllResults";

export async function getStaticPaths() {
  const { data } = await client.query({
    query: GET_CATEGORIES,
    variables: { first: 200 },
  });

  return data.categories.nodes.map((page) => ({
    params: { slug: page.slug },
    props: { page },
  }));
}

const { data: templateData } = await client.query({
  query: GET_TEMPLATE,
  variables: { slug: "category" },
});

const { slug } = Astro.params

const category = await client.query({
  query: GET_CATEGORY_BY_SLUG,
  variables: { slug },
});

if (!category) {
  return {
    status: 404,
    error: new Error(`No category found for slug ${slug}`),
  };
}

const categoryId = category?.data?.category?.databaseId;
const categoryName = category?.data?.category?.name;
const categoryDescription = category?.data?.category?.description;

const posts  = await getPostsByCategory(categoryId);
const page = templateData?.templateBy;
const classes = `category category-${categoryName.toLowerCase().replace(" ", "-")}`;
const title = page?.title || `${categoryName}`;
---

<Layout title={title} description={page?.metaDescription} templateId={page?.databaseId} categoryId={categoryId} classes={classes}>
  <BannerTitle
    title={title}
    subtitle={page?.subtitle}
    image={page?.bannerImage?.sourceUrl}
    width={page?.bannerImage?.mediaDetails.width}
    height={page?.bannerImage?.mediaDetails.height}
    crumbs={[{ label: "Categories", path: "/category" }, { label: title }]}
  />
  { categoryDescription && <div class="container category-description">{categoryDescription}</div>}
  { page?.content && <div class="container content" set:html={page?.content} />}
  <div class="main-body">
    <div class="category">
      { posts.map((post) => (
        <PostPreview post={post} path="articles" classes="post-preview" />
      ))
      }
    </div>
  </div>
</Layout>
