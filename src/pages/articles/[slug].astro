---
// same as src/pages/blog/[slug].astro
import client from '../../lib/apolloClient';
import { GET_POST, GET_ALL_POSTS } from '../../lib/queries';
import Layout from '../../layouts/Layout.astro';
import BannerTitle from '../../components/BannerTitle.astro';
import TagLinks from '../../components/TagLinks.astro';
import { replaceImageUrls } from '../../lib/utils';
import { Image } from 'astro:assets';
import { getImages } from '../../lib/utils';
import { getAllResults } from '../../lib/fetchAllResults';

export async function getStaticPaths() {
  const postAlias = import.meta.env.POST_ALIAS;
  if (postAlias !== 'articles') {
    return [];
  }
  const allPosts = await getAllResults(GET_ALL_POSTS);
  return allPosts.map(page => ({
    params: { slug: page?.slug },
    props: { page },
  }));
}

const { slug } = Astro.params;

const { data } = await client.query({
    query: GET_POST,
    variables: { slug },
  });

const page = data.postBy;

if (!page) {
  throw new Error(`Post not found for slug: ${slug}`);
}

const featuredImage = page?.featuredImage?.node;
const featuredImageSourceUrl = featuredImage?.sourceUrl;

// Process content and image concurrently
const [updatedContent, localImage] = await Promise.all([
  replaceImageUrls(page?.content).catch(error => {
    console.error('Error replacing image URLs:', error);
    return ''; // Return empty string on error
  }),
  featuredImageSourceUrl ? getImages('featured', featuredImageSourceUrl).catch(error => {
    console.error('Error fetching local image:', error);
    return null; // Return null on error
  }) : Promise.resolve(null)
]);

const srcset = localImage ? `${localImage.default.src} 1x` : '';
---

<Layout pageId={page?.databaseId} title={page?.title} description={page?.metaDescription} classes="post">
  <BannerTitle
    title={page?.title}
    subtitle={page?.subtitle}
    image={page?.bannerImage?.sourceUrl}
    width={page?.bannerImage?.mediaDetails?.width}
    height={page?.bannerImage?.mediaDetails?.height}
    crumbs={[{ label: 'Articles', path: '/articles/'}, { label: page?.title }]}
  />
  <div class="main-body">
    {localImage && (
      <Image
        src={localImage.default}
        srcset={srcset}
        alt={`Featured image for ${page?.title}`}
        class="featured-image"
        loading="eager"
      />
    )}
    <div set:html={updatedContent} />
    <TagLinks tags={page?.tags} />
  </div>
</Layout>
