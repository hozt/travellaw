---
// same as src/pages/blog/[page].astro
import Layout from "../../layouts/Layout.astro";
import PostPreview from "../../components/PostPreview.astro";
import BannerTitle from "../../components/BannerTitle.astro";
import { GET_ARTICLES_COUNT, GET_TEMPLATE } from "../../lib/queries";
import Pagination from "../../components/Pagination.astro";
import { fetchArticles } from "../../lib/api";
import { articleStore } from "../../store/articleStore";
import client from "../../lib/apolloClient";
import { getTotalCount } from "../../lib/fetchAllResults";

const ITEMS_PER_PAGE = 10;

export async function getStaticPaths() {
  const postAlias = import.meta.env.POST_ALIAS;
  if (postAlias !== 'articles') {
    return [];
  }
  const totalArticles = await getTotalCount(GET_ARTICLES_COUNT);

  // Calculate the number of pages
  const totalPages = Math.ceil(totalArticles / 10);

  // Generate paths for all pages
  const paths = Array.from({ length: totalPages }, (_, i) => ({
    params: { page: (i + 1).toString() },
  }));

  return paths;
}

const { page } = Astro.params;
const currentPage = parseInt(page) || 1;

const templateData = await client.query({
  query: GET_TEMPLATE,
  variables: { slug: "article" },
});

const template = templateData.data.templateBy;
const title = template?.title || "Articles";

let store;
articleStore.subscribe((value) => (store = value))();

const totalArticles = await getTotalCount(GET_ARTICLES_COUNT);

const articles = await fetchArticles(currentPage, store.pageInfo.endCursor);

const totalPages =
  Math.ceil(totalArticles / ITEMS_PER_PAGE) +
  (store.pageInfo.hasNextPage ? 1 : 0);

---

<Layout title={`${title} - Page ${currentPage}`} description={template?.metaDescription} classes="page" templateId={template?.databaseId}>
  <BannerTitle
    title={title}
    subtitle={template?.subtitle}
    image={template?.bannerImage?.sourceUrl}
    width={template?.bannerImage?.mediaDetails.width}
    height={template?.bannerImage?.mediaDetails.height}
    crumbs={[{ label: title }]}
  />
  <div class="main-body">
    <div class="article-list">
      {articles.map((article) => (
        <PostPreview key={article.databaseId} post={article} classes="post-preview" />
      ))}
    </div>
    <Pagination currentPage={currentPage} totalPages={totalPages} />
  </div>
</Layout>
