---
let formData = { name: '', email: '', phone: '', message: '' };
let isSubmitted = false;
let isSubmitting = false;
let error = '';
let turnstileToken = '';

const handleChange = (e) => {
  formData = { ...formData, [e.target.name]: e.target.value };
};

const handleSubmit = async (event) => {
  event.preventDefault();

  if (isSubmitting) {
    return;
  }

  isSubmitting = true;
  error = '';
  isSubmitted = false;

  if (!turnstileToken) {
    error = 'Please complete the Turnstile challenge.';
    isSubmitting = false;
    return;
  }

  try {
    const response = await fetch('/contact', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ ...formData, 'cf-turnstile-response': turnstileToken }),
    });

    if (!response.ok) {
      throw new Error('Failed to send email');
    }

    const result = await response.json();
    if (result.error) {
      throw new Error(result.error);
    }

    isSubmitted = true;
  } catch (error) {
    error = error.message;
  } finally {
    isSubmitting = false;
  }
};

const turnstileCallback = (token) => {
  turnstileToken = token;
};

window.turnstileCallback = turnstileCallback;
---

<div class="p-6 mx-auto mt-6 contact-form">
  {isSubmitted ? (
    <div class="relative px-4 py-3 text-green-700 bg-green-100 border border-green-400 rounded" role="alert">
      <strong class="font-bold">Success!</strong>
      <span class="block sm:inline"> Your message has been sent.</span>
    </div>
  ) : (
    <form onSubmit={handleSubmit}>
      <label class="block mb-3 text-xs font-bold tracking-wide text-gray-700 uppercase">
        Name <span class="text-red-500">*</span>
        <input type="text" name="name" value={formData.name} onChange={handleChange} class="w-full p-2 mt-1 border rounded" required />
      </label>
      <label class="block mb-3 text-xs font-bold tracking-wide text-gray-700 uppercase">
        Email <span class="text-red-500">*</span>
        <input type="email" name="email" value={formData.email} onChange={handleChange} class="w-full p-2 mt-1 border rounded" required />
      </label>
      <label class="block mb-3 text-xs font-bold tracking-wide text-gray-700 uppercase">
        Phone
        <input type="tel" name="phone" value={formData.phone} onChange={handleChange} class="w-full p-2 mt-1 border rounded" />
      </label>
      <label class="block mb-4 text-xs font-bold tracking-wide text-gray-700 uppercase">
        Your Message <span class="text-red-500">*</span>
        <textarea name="message" value={formData.message} onChange={handleChange} class="w-full p-2 mt-1 border rounded" required></textarea>
      </label>

      <div class="cf-turnstile" data-sitekey="0x4AAAAAAAVEq-a9GhIoJNXg" data-theme="light" data-callback="turnstileCallback"></div>

      <button type="submit" disabled={isSubmitting} class={`p-2 mt-4 ${isSubmitting ? 'bg-gray-300' : 'bg-gray-500'} text-white rounded`}>
        {isSubmitting ? 'Sending...' : 'Send'}
      </button>
    </form>
  )}
  {error && (
    <div class="relative px-4 py-3 mt-4 text-red-700 bg-red-100 border border-red-400 rounded" role="alert">
      <strong class="font-bold">Error:</strong>
      <span class="block sm:inline"> {error}</span>
    </div>
  )}
</div>