---
// src/components/Navigation.astro
import client from '../lib/apolloClient';
import { GET_MENU_ITEMS, GET_MENU_ITEMS_BY_LANGUAGE, GET_LANGUAGES } from '../lib/queries';
import CustomLink from './CustomLink.astro';

const slug = Astro.params.slug;
const defaultLanguage = import.meta.env.DEFAULT_LANGUAGE;

let languageCode = '';
if (defaultLanguage && slug?.includes('/')) {
  const parsedSlug = slug.split('/').filter(Boolean);
  if (parsedSlug.length > 0) {
    languageCode = parsedSlug[0];
    const { data: languagesData } = await client.query({
      query: GET_LANGUAGES
    });
    // check if the language code is valid from languagesData
    const validLanguageCodes = languagesData.languages.map(lang => lang.slug);
    if (!validLanguageCodes.includes(languageCode)) {
      languageCode = ''; // Reset if invalid
    } else {
      languageCode = languageCode.toUpperCase();
    }
  }
}

let data;

if (languageCode) {
  const { data: menuData } = await client.query({
    query: GET_MENU_ITEMS_BY_LANGUAGE,
    variables: { first: 200, language: languageCode },
  });
  data = menuData;
} else {
  const { data: menuData } = await client.query({
    query: GET_MENU_ITEMS,
    variables: { first: 200 },
  });
  data = menuData;
}

const menuItems = data?.menuItems?.nodes;

if (!menuItems) {
  throw new Error('No menu items found.');
}

function getClassNames(item) {
  const menuClass = `menu-${item.label.replace(/ /g, '-').toLowerCase()}`;
  return `${item.cssClasses?.join(' ') || ''} ${item.childItems?.nodes?.length > 0 ? 'group ' : ''}${menuClass}`;
}
---

<ul class="main-menu">
  {menuItems.map(item => item.parentDatabaseId === 0 && (
    <li class={`menu-item ${getClassNames(item)}${item.childItems?.nodes?.length > 0 ? ' has-indicator' : ''}`}>
      <CustomLink url={item.url} label={item.label} classes={item.cssClasses} indicator={item.childItems?.nodes?.length > 0} />
      {item.childItems?.nodes?.length > 0 && (
        <ul class="hidden sub-menu group-hover:block">
          {item.childItems.nodes.map(child => (
            <li class={`menu-item-child ${child.cssClasses?.join(' ') || ''}`}>
              <CustomLink url={child.url} label={child.label} classes={child.cssClasses} />
              {child.childItems?.nodes?.length > 0 && (
                <ul class="sub-menu-child">
                  {child.childItems.nodes.map(grandchild => (
                    <li class={`menu-item-grandchild ${grandchild.cssClasses?.join(' ') || ''}`}>
                      <CustomLink url={grandchild.url} label={grandchild.label} classes={grandchild.cssClasses} />
                    </li>
                  ))}
                </ul>
              )}
            </li>
          ))}
        </ul>
      )}
    </li>
  ))}
</ul>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const menuToggle = document.getElementById('menu-toggle');
    const menuIcon = document.getElementById('menu-icon');
    const mainNav = document.querySelector('.main-menu');
    const menuItems = document.querySelectorAll('.main-menu > .menu-item');
    const isMobileOrTablet = window.innerWidth <= 1024;

    if (menuToggle && menuIcon && mainNav) {
        menuToggle.addEventListener('click', (e) => {
            e.stopPropagation();
            const isExpanded = mainNav.classList.contains('block');
            mainNav.classList.toggle('block', !isExpanded);
            mainNav.classList.toggle('hidden', isExpanded);

            menuIcon.classList.toggle('icon-[mdi--menu]', isExpanded);
            menuIcon.classList.toggle('icon-[mdi--close]', !isExpanded);
        });
    }

    function toggleSubmenu(item, force = null) {
        const submenu = item.querySelector('.sub-menu');
        if (submenu) {
            const isActive = force !== null ? force : !item.classList.contains('active');
            item.classList.toggle('active', isActive);
            submenu.style.display = isActive ? 'block' : 'none';
        }
    }

    function closeAllSubmenus() {
        menuItems.forEach(item => toggleSubmenu(item, false));
    }

    menuItems.forEach((item, index) => {
        const link = item.querySelector('a');
        const submenu = item.querySelector('.sub-menu');

        link.addEventListener('click', function(e) {
            e.stopPropagation();

            if (isMobileOrTablet) {
                e.preventDefault();

                if (submenu) {
                    closeAllSubmenus();
                    toggleSubmenu(item, true);
                } else {
                    window.location.href = this.href;
                }
            }
        });

        if (submenu) {
            const childItems = submenu.querySelectorAll('.menu-item-child');
            childItems.forEach((childItem, childIndex) => {
                const childLink = childItem.querySelector('a');
                const subMenuChild = childItem.querySelector('.sub-menu-child');

                childLink.addEventListener('click', function(e) {
                    e.stopPropagation();

                    if (isMobileOrTablet) {
                        e.preventDefault();

                        if (subMenuChild) {
                            toggleSubmenu(childItem);
                        } else {
                            window.location.href = this.href;
                        }
                    }
                });
            });
        }
    });

    document.addEventListener('click', function(e) {
        if (!e.target.closest('.main-menu') && !e.target.closest('#menu-toggle')) {
            closeAllSubmenus();
        }
    });
});
</script>
