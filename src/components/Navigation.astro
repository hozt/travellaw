---
import client from '../lib/apolloClient';
import { GET_MENU_ITEMS } from '../lib/queries';
import CustomLink from './CustomLink.astro';

const { data } = await client.query({
  query: GET_MENU_ITEMS,
  variables: { first: 200 },
});

const menuItems = data?.menuItems?.nodes;

if (!menuItems) {
  throw new Error('No menu items found.');
}

function getClassNames(item) {
  const menuClass = `menu-${item.label.replace(/ /g, '-').toLowerCase()}`;
  return `${item.cssClasses?.join(' ') || ''} ${item.childItems?.nodes?.length > 0 ? 'group ' : ''}${menuClass}`;
}
---

<ul class="main-menu">
  {menuItems.map(item => item.parentDatabaseId === 0 && (
    <li class={`menu-item ${getClassNames(item)}`}>
      <CustomLink url={item.url} label={item.label} classes={item.cssClasses} indicator={item.childItems?.nodes?.length > 0} />
      {item.childItems?.nodes?.length > 0 && (
        <ul class="hidden sub-menu group-hover:block">
          {item.childItems.nodes.map(child => (
            <li class={`menu-item-child ${child.cssClasses?.join(' ') || ''}`}>
              <CustomLink url={child.url} label={child.label} classes={child.cssClasses} />
              {child.childItems?.nodes?.length > 0 && (
                <ul class="sub-menu-child">
                  {child.childItems.nodes.map(grandchild => (
                    <li class={`menu-item-grandchild ${grandchild.cssClasses?.join(' ') || ''}`}>
                      <CustomLink url={grandchild.url} label={grandchild.label} classes={grandchild.cssClasses} />
                    </li>
                  ))}
                </ul>
              )}
            </li>
          ))}
        </ul>
      )}
    </li>
  ))}
</ul>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const menuItems = document.querySelectorAll('.menu-item');
  const isMobileOrTablet = window.innerWidth <= 1024;
  let hideTimeout;

  menuItems.forEach(item => {
    const link = item.querySelector('a');
    const submenu = item.querySelector('.sub-menu');

    if (submenu) {
      // Toggle submenu visibility on mobile/tablet
      link.addEventListener('click', function(e) {
        if (isMobileOrTablet) {
          e.preventDefault();  // Prevent link navigation if expanding submenu
          menuItems.forEach(otherItem => {
            if (otherItem !== item) {
              otherItem.classList.remove('active');
              otherItem.querySelector('.sub-menu')?.style.removeProperty('display');
            }
          });
          item.classList.toggle('active');
        }
      });

      // Handle hover delay for desktop view
      if (!isMobileOrTablet) {
        // Clear the hide timeout if hovering back
        item.addEventListener('mouseenter', () => {
          clearTimeout(hideTimeout);
          submenu.style.display = 'block';
        });

        // Add a delay when mouse leaves the item
        item.addEventListener('mouseleave', () => {
          hideTimeout = setTimeout(() => {
            submenu.style.display = 'none';
          }, 300);  // Delay of 300ms
        });
      }

      // Handle third-level submenus (grandchild)
      const childItems = submenu.querySelectorAll('.menu-item-child');
      childItems.forEach(childItem => {
        const childLink = childItem.querySelector('a');
        const subMenuChild = childItem.querySelector('.sub-menu-child');

        if (subMenuChild) {
          // Show third-level menu on click for mobile/tablet
          childLink.addEventListener('click', function(e) {
            if (isMobileOrTablet) {
              e.preventDefault();  // Prevent link navigation if expanding third level
              childItems.forEach(otherChild => {
                if (otherChild !== childItem) {
                  otherChild.classList.remove('active');
                  otherChild.querySelector('.sub-menu-child')?.style.removeProperty('display');
                }
              });
              childItem.classList.toggle('active');
            }
          });
        }
      });

      // Close all submenus when clicked outside
      document.addEventListener('click', function(e) {
        if (!e.target.closest('.menu-item')) {
          menuItems.forEach(item => {
            item.classList.remove('active');
            item.querySelector('.sub-menu')?.style.removeProperty('display');
          });
        }
      });
    }
  });
});
</script>
