---
import client from '../lib/apolloClient';
import { GET_MENU_ITEMS } from '../lib/queries';
import CustomLink from './CustomLink.astro';

const { data } = await client.query({
  query: GET_MENU_ITEMS,
  variables: { first: 200 },
});

const menuItems = data?.menuItems?.nodes;

if (!menuItems) {
  throw new Error('No menu items found.');
}

function getClassNames(item) {
  const menuClass = `menu-${item.label.replace(/ /g, '-').toLowerCase()}`;
  return `${item.cssClasses?.join(' ') || ''} ${item.childItems?.nodes?.length > 0 ? 'has-submenu ' : ''}${menuClass}`;
}
---

<ul class="main-menu">
  {menuItems.map(item => item.parentDatabaseId === 0 && (
    <li class={`menu-item ${getClassNames(item)}`} key={item.id}>
      <CustomLink url={item.url} label={item.label} classes={item.cssClasses} indicator={item.childItems?.nodes?.length > 0} />
      {item.childItems?.nodes?.length > 0 && (
        <ul class="sub-menu">
          {item.childItems.nodes.map(child => (
            <li class={`${child.cssClasses?.join(' ') || ''} ${child.childItems?.nodes?.length > 0 ? 'has-submenu' : ''}`} key={child.id}>
              <CustomLink url={child.url} label={child.label} classes={child.cssClasses} />
              {child.childItems?.nodes?.length > 0 && (
                <ul class="sub-menu-child">
                  {child.childItems.nodes.map(grandchild => (
                    <li class={grandchild ? grandchild.cssClasses?.join(' ') : ''} key={grandchild.id}>
                      <CustomLink url={grandchild.url} label={grandchild.label} classes={grandchild.cssClasses} />
                    </li>
                  ))}
                </ul>
              )}
            </li>
          ))}
        </ul>
      )}
    </li>
  ))}
</ul>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const menuItems = document.querySelectorAll('.menu-item');
  let timeout;

  menuItems.forEach(item => {
    const submenu = item.querySelector('.sub-menu');
    if (submenu) {
      item.addEventListener('mouseenter', () => {
        clearTimeout(timeout);
        menuItems.forEach(otherItem => {
          if (otherItem !== item) {
            otherItem.classList.remove('active');
          }
        });
        item.classList.add('active');
      });

      item.addEventListener('mouseleave', () => {
        timeout = setTimeout(() => {
          if (!item.matches(':hover')) {
            item.classList.remove('active');
          }
        }, 300);
      });
    }
  });

  // Mobile menu handling
  const isMobile = () => window.innerWidth <= 768;

  menuItems.forEach(item => {
    const link = item.querySelector('a');
    const submenu = item.querySelector('.sub-menu');

    if (submenu) {
      link.addEventListener('click', function(e) {
        if (isMobile()) {
          e.preventDefault();
          item.classList.toggle('active');
          menuItems.forEach(otherItem => {
            if (otherItem !== item) {
              otherItem.classList.remove('active');
            }
          });
        }
      });
    }
  });

  // Close submenu if clicked outside
  document.addEventListener('click', function(e) {
    if (!e.target.closest('.menu-item')) {
      menuItems.forEach(item => {
        item.classList.remove('active');
      });
    }
  });
});
</script>
