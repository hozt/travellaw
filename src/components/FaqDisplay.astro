---
import client from '../lib/apolloClient';
import { GET_FAQS } from '../lib/queries';

export interface FaqDisplayProps {
  faqTopicIds: number[];
}

const { faqTopicIds, heading } = Astro.props;

const { data } = await client.query({
  query: GET_FAQS
});

if (!data || !data.faqTopics || !data.faqs) {
  console.error('No FAQ data returned from the query');
}

// Filter and group FAQs client-side
const groupedFaqs = faqTopicIds.map(id => {
  const topic = data.faqTopics.nodes.find(topic => topic.faqTopicId === id);
  const topicFaqs = data.faqs.nodes.filter(faq =>
    faq.faqTopics.nodes.some(faqTopic => faqTopic.databaseId === id)
  );

  return {
    id,
    name: topic?.name || `Topic ${id}`,
    description: topic?.description || '',
    count: topic?.count || 0,
    faqs: topicFaqs
  };
});

---

<div>
  {groupedFaqs.length > 0 ? (
    groupedFaqs.map(group => (
      <div class="mb-6 faq-group">
        { heading && <h3 class="faq-group-name">{group.name}</h3> }
        { heading && group.description && <p class="faq-description">{group.description}</p> }
        {group.faqs.length > 0 ? (
          <div class="faq-list">
            {group.faqs.map(faq => (
              <details class="mb-4 faq-item">
                <summary class="faq-title">
                  {faq.title}
                </summary>
                <div class="faq-content" set:html={faq.content}></div>
              </details>
            ))}
          </div>
        ) : (
          <p class="text-gray-500">No FAQs available for this topic.</p>
        )}
      </div>
    ))
  ) : (
    <p class="text-center text-gray-500">No FAQ topics found.</p>
  )}
</div>
