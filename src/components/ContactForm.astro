---
// ContactForm.astro

let serverError = '';
let isSubmitted = false;

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  console.log('formData', formData);
  const turnstileResponse = formData.get('cf-turnstile-response');

  try {
    const response = await fetch('/contact', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ ...formData, 'cf-turnstile-response': turnstileResponse }),
    });
  //
  if (!response.ok) {
      throw new Error('Failed to send email');
    }

    const result = await response.json();
    if (result.error) {
      throw new Error(result.error);
    }

    // setIsSubmitted(true);
  } catch (error) {
    console.error('Error:', error);
    // setError(error.message);
  } finally {
    console.log('finally');
    // setIsSubmitting(false);
    //isSubmittingRef.current = false;
  }
};
/*
    // Validate Turnstile response
    const turnstileSecret = import.meta.env.TURNSTILE_SECRET_KEY;
    const turnstileValidation = await fetch('https://challenges.cloudflare.com/turnstile/v0/siteverify', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        secret: turnstileSecret,
        response: turnstileResponse,
      }),
    });

    const turnstileResult = await turnstileValidation.json();

    if (!turnstileResult.success) {
      throw new Error('Turnstile validation failed');
    }

    // Here you would handle the form submission, e.g., sending an email
    isSubmitted = true;

    // Return a JSON response
    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  } catch (error) {
    serverError = error.message;
    // Return a JSON response for errors too
    return new Response(JSON.stringify({ success: false, error: serverError }), {
      status: 400,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }
}
  */

const turnstileSiteKey = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY;
---

<div class="max-w-lg p-6 mx-auto">
    {isSubmitted ? (
      <div class="relative px-4 py-3 text-green-700 bg-green-100 border border-green-400 rounded" role="alert">
        <strong class="font-bold">Success!</strong>
        <span class="block sm:inline"> Your message has been sent.</span>
      </div>
    ) : (
      <form method="POST">
        <div class="mb-4">
          <label class="block mb-2 text-sm font-bold text-gray-700" htmlFor="name">
            Name <span class="text-red-500">*</span>
          </label>
          <input type="text" name="name" id="name" class="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" required />
        </div>

        <div class="mb-4">
          <label class="block mb-2 text-sm font-bold text-gray-700" htmlFor="email">
            Email <span class="text-red-500">*</span>
          </label>
          <input type="email" name="email" id="email" class="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" required />
        </div>

        <div class="mb-4">
          <label class="block mb-2 text-sm font-bold text-gray-700" htmlFor="phone">
            Phone
          </label>
          <input type="tel" name="phone" id="phone" class="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" />
        </div>

        <div class="mb-4">
          <label class="block mb-2 text-sm font-bold text-gray-700" htmlFor="message">
            Your Message <span class="text-red-500">*</span>
          </label>
          <textarea name="message" id="message" class="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" required></textarea>
        </div>

        <div id="cf-turnstile" class="mb-4 cf-turnstile" data-sitekey={turnstileSiteKey}></div>

        <button type="submit" id="submitButton" class="w-full p-3 mt-4 text-white rounded bg-secondary focus:outline-none focus:ring-2">
          Send
        </button>
      </form>
    )}

    {serverError && (
      <div class="relative px-4 py-3 mt-4 text-red-700 bg-red-100 border border-red-400 rounded" role="alert">
        <strong class="font-bold">Error:</strong>
        <span class="block sm:inline"> {serverError}</span>
      </div>
    )}
  </div>

<script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>

<script>
  let isSubmitting = false;

  document.querySelector('form')?.addEventListener('submit', async (event) => {
    event.preventDefault();

    if (isSubmitting) return;

    const submitButton = document.getElementById('submitButton');
    submitButton.disabled = true;
    submitButton.textContent = 'Sending...';
    isSubmitting = true;

    const formData = new FormData(event.target);

    try {
      const response = await fetch(event.target.action, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Failed to send email');
      }

      const result = await response.json();
      if (result.error) {
        throw new Error(result.error);
      }

      // Reload the page to show the success message
      window.location.reload();
    } catch (error) {
      const errorElement = document.createElement('div');
      errorElement.className = 'relative px-4 py-3 mt-4 text-red-700 bg-red-100 border border-red-400 rounded';
      errorElement.setAttribute('role', 'alert');
      errorElement.innerHTML = `<strong class="font-bold">Error:</strong> <span class="block sm:inline">${error.message}</span>`;
      event.target.parentNode.appendChild(errorElement);
    } finally {
      submitButton.disabled = false;
      submitButton.textContent = 'Send';
      isSubmitting = false;
      // Reset Turnstile widget
      turnstile.reset();
    }
  });
</script>